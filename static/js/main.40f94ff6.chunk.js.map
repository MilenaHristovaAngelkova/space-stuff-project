{"version":3,"sources":["Header.js","Home.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Home","className","id","onClick","fetch","then","res","ok","Error","json","data","template","title","url","explanation","date","document","querySelector","innerHTML","catch","err","message","people","map","person","name","craft","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"+LAQeA,EARA,WACX,OACI,iCACI,qDCiEGC,EApEF,WAwDT,OACI,sBAAKC,UAAU,OAAf,UACI,wBAAQC,GAAG,YAAYC,QAzDJ,WACvBC,MAAM,wFACLC,MAAK,SAAAC,GACF,IAAIA,EAAIC,GACJ,MAAM,IAAIC,MAAM,8CAEpB,OAAOF,EAAIG,UAEdJ,MAAK,SAAAK,GACF,IAAMC,EAAQ,6EAEAD,EAAKE,MAFL,+CAGKF,EAAKG,IAHV,gBAGqBH,EAAKE,MAH1B,uCAIDF,EAAKI,YAJJ,8CAKKJ,EAAKK,KALV,oDAQfC,SAASC,cAAc,kBAAkBC,UAAYP,KAEvDQ,OAAM,SAAAC,GACH,IAAMT,EAAQ,oEAELS,EAAIC,QAFC,0CAKdL,SAASC,cAAc,kBAAkBC,UAAYP,MAgCrD,kCACA,wBAAQT,GAAG,YAAYC,QA7BC,WAC5BC,MAAM,0CACLC,MAAK,SAAAC,GACF,IAAKA,EAAIC,GACL,MAAM,IAAIC,MAAM,wDAEpB,OAAOF,EAAIG,UAEdJ,MAAK,SAAAK,GACF,IACMC,EAAWD,EAAKY,OAAOC,KAAI,SAAAC,GAC7B,MAAM,OAAN,OAAcA,EAAOC,KAArB,4BAA6CD,EAAOE,MAApD,YAGJV,SAASC,cAAc,mBAAmBC,UAL/B,6CAKmDP,KAEjEQ,OAAM,SAAAC,GACH,IAAMT,EAAQ,oEAELS,EAAIC,QAFC,0CAKdL,SAASC,cAAc,mBAAmBC,UAAYP,MAOtD,yCACA,yBAASV,UAAU,kBAEnB,yBAASA,UAAU,uBCjDhB0B,MATf,WACE,OACE,sBAAK1B,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCIS2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASuB,eAAe,SAM1BX,K","file":"static/js/main.40f94ff6.chunk.js","sourcesContent":["const Header = () => {\r\n    return (\r\n        <header>\r\n            <h1>Cool Space Stuff</h1>\r\n        </header>\r\n    );\r\n}\r\n \r\nexport default Header;","const Home = () => {\r\n    const handleOnClickImage = () => {\r\n        fetch(\"https://api.nasa.gov/planetary/apod?api_key=9YUajepmhWTLLO1dz38SxEeKsWa8KyzPDKK66Bep\")\r\n        .then(res => {\r\n            if(!res.ok){\r\n                throw new Error(\"Could not fetch the data from this source.\")\r\n            }\r\n            return res.json();\r\n        })\r\n        .then(data => {\r\n            const template = `\r\n            <div className=\"home-data\">\r\n                    <h3>${data.title}</h3>\r\n                    <img src=${data.url} alt=${data.title} />\r\n                    <p>${data.explanation}</p>\r\n                    <address>${data.date}</address>\r\n                </div>\r\n            `\r\n           document.querySelector(\".content-image\").innerHTML = template;\r\n        })\r\n        .catch(err => {\r\n            const template = `\r\n            <div className=\"error\">\r\n                <p>${err.message}</p>\r\n            </div>\r\n            `\r\n            document.querySelector(\".content-image\").innerHTML = template;\r\n        })        \r\n    }\r\n\r\n    const handleOnClickPeopleInfo = () => {\r\n        fetch(\"http://api.open-notify.org/astros.json\")\r\n        .then(res => {\r\n            if (!res.ok) {\r\n                throw new Error(\"Could not fetch the people details from this source.\")\r\n            }\r\n            return res.json();\r\n        })\r\n        .then(data => {\r\n            const title = `<h3>List of people currently in space</h3>`;\r\n            const template = data.people.map(person => {\r\n                return `<li>${person.name} is currently on ${person.craft}</li>`;\r\n            })\r\n\r\n            document.querySelector(\".content-people\").innerHTML = title + template;\r\n        })\r\n        .catch(err => {\r\n            const template = `\r\n            <div className=\"error\">\r\n                <p>${err.message}</p>\r\n            </div>\r\n            `\r\n            document.querySelector(\".content-people\").innerHTML = template;\r\n        })   \r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <button id=\"get-image\" onClick={handleOnClickImage}>Get image of the day</button>\r\n            <button id=\"get-story\" onClick={handleOnClickPeopleInfo}>Get info on people in space</button>\r\n            <article className=\"content-image\">                \r\n            </article>\r\n            <article className=\"content-people\">\r\n            </article>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import './App.css';\nimport Header from './Header';\nimport Home from './Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}